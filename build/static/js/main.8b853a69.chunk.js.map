{"version":3,"sources":["Context/localstorage.js","Context/Bookcontext.js","Components/Navbar.js","Components/Bookdetail.js","Components/Booklist.js","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","initialValue","_useState","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","_useState2","Object","slicedToArray","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","BookContext","createContext","BookContextprovider","props","_useLocalStorage","_useLocalStorage2","Books","setBooks","react_default","a","createElement","Provider","addBook","title","author","concat","toConsumableArray","id","uuidv4","removeBook","filter","book","children","Navbar","useContext","className","length","BookDetails","_ref","onClick","BookList","map","Bookdetail","Form","settitle","_useState3","_useState4","setauthor","onSubmit","e","preventDefault","type","required","placeholder","onChange","target","App","Bookcontext","Components_Navbar","Components_Form","Booklist","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8b853a69.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n// Usage\nfunction App() {\n    // Similar to useState but first arg is key to the value in local storage.\n    const [name, setName] = useLocalStorage('name', 'Bob');\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                placeholder=\"Enter your name\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n            />\n        </div>\n    );\n}\n\n// Hook\nfunction useLocalStorage(key, initialValue) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            // Get from local storage by key\n            const item = window.localStorage.getItem(key);\n            // Parse stored json or if none return initialValue\n            return item ? JSON.parse(item) : initialValue;\n        } catch (error) {\n            // If error also return initialValue\n            console.log(error);\n            return initialValue;\n        }\n    });\n\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = value => {\n        try {\n            // Allow value to be a function so we have same API as useState\n            const valueToStore =\n                value instanceof Function ? value(storedValue) : value;\n            // Save state\n            setStoredValue(valueToStore);\n            // Save to local storage\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        } catch (error) {\n            // A more advanced implementation would handle the error case\n            console.log(error);\n        }\n    };\n\n    return [storedValue, setValue];\n}\n\nexport default useLocalStorage","import React, { createContext } from 'react'\nimport { v4 as uuidv4 } from 'uuid';\nimport useLocalStorage from './localstorage'\n\n\n\nexport const BookContext = createContext()\n\n\nconst BookContextprovider = (props) => {\n\n    const [Books, setBooks] = useLocalStorage('Books', [])\n\n    // useEffect(() => {\n    //     const localdata = localStorage.getItem('Books')\n    //     if (localdata) {\n    //         JSON.parse(localdata)\n    //     }\n    // },[])\n \n    // useEffect(() => {\n    //     localStorage.setItem('Books', JSON.stringify(Books))\n    // })\n\n\n\n    \n    const addBook = (title, author,) => {\n        setBooks([...Books, { title, author, id: uuidv4() }])\n    }\n\n    const removeBook = (id) => {\n        setBooks(Books.filter(book => book.id !== id))\n\n    }\n\n\n    return (\n\n        <BookContext.Provider value={{ Books, addBook, removeBook }}>\n\n            {props.children}\n\n        </BookContext.Provider>\n\n    )\n}\n\nexport default BookContextprovider\n","import React, { useContext } from 'react'\nimport {BookContext} from '../Context/Bookcontext'\n\nconst Navbar = () => {\n\n    const { Books } = useContext(BookContext)\n\n    return (\n        <div className='navbar'>\n            <h1>React reading list</h1>\n            <p>Learning Target : {Books.length}</p>\n\n        </div>\n\n    )\n}\n\nexport default Navbar\n","import React, {useContext} from 'react'\nimport { BookContext } from '../Context/Bookcontext'\n\n\nconst BookDetails = ({Books}) => {\n\n    const {removeBook} = useContext(BookContext)\n\n    return (\n        <li onClick={() => removeBook(Books.id) }>\n        <div className='title'> {Books.title} </div>\n        <div className='author'> {Books.author} </div>\n        </li>\n    )\n}\n\nexport default BookDetails\n\n","import React, { useContext } from 'react'\nimport { BookContext } from '../Context/Bookcontext'\nimport BookDetails from './Bookdetail'\n\n\nconst BookList = () => {\n\n    const { Books } = useContext(BookContext)\n\n\n\n    return Books.length ? (\n\n        <div className='book-list'>\n            <ul>\n                {Books.map(Books => { return (<BookDetails Books={Books} key={Books.id} />); })}\n            </ul>\n        </div>\n\n    )\n        :\n        (\n            <div className='empty'>No Target set ... </div>\n\n        )\n}\n\nexport default BookList","import React, { useContext, useState } from 'react'\nimport { BookContext } from '../Context/Bookcontext'\n\n\nconst Form = () => {\n\n    const { addBook } = useContext(BookContext)\n\n    const [title, settitle] = useState('')\n    const [author, setauthor] = useState('')\n\n    const submitbook = (e) => {\n        e.preventDefault()\n        addBook (title, author)\n        settitle('')\n        setauthor('')\n    }\n\n\n\n    return (\n<form onSubmit={submitbook}>\n            <input type='text' required placeholder='Book Subject' value={title} onChange={(e) => settitle(e.target.value)} />\n            <input type='text' required placeholder='Author Name' value={author} onChange={(e) => setauthor(e.target.value)} />\n            <input type='submit' value='Add Book' />\n</form>\n\n\n    )\n}\n\nexport default Form\n\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport BookContextprovider from './Context/Bookcontext';\nimport Booklist from './Components/Booklist';\nimport Form from './Components/Form';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <BookContextprovider>\n        <Navbar />\n        <Form />\n        <Booklist />\n      </BookContextprovider>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n<App />, document.getElementById('root')\n\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}